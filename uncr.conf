# Uncrustify 0.59

#
# General options
#

# The type of line endings
newlines                                 = auto     # auto/lf/crlf/cr

# The original size of tabs in the input
input_tab_size                           = 4        # number

# The size of tabs in the output (only used if align_with_tabs=true)
output_tab_size                          = 4        # number

# The ASCII value of the string escape char, usually 92 (\) or 94 (^). (Pawn)
string_escape_char                       = 92       # number

# Alternate string escape char for Pawn. Only works right before the quote char.
string_escape_char2                      = 0        # number

# Allow interpreting '>=' and '>>=' as part of a template in 'void f(list<list<B>>=val);'.
# If true (default), 'assert(x<0 && y>=3)' will be broken.
# Improvements to template detection may make this option obsolete.
tok_split_gte                            = false    # false/true

# Control what to do with the UTF-8 BOM (recommed 'remove')
utf8_bom                                 = ignore   # ignore/add/remove/force

# If the file only contains chars between 128 and 255 and is not UTF-8, then output as UTF-8
utf8_byte                                = false    # false/true

# Force the output encoding to UTF-8
utf8_force                               = false    # false/true

#
# Indenting
#

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
indent_columns                           = 4        # number

# The continuation indent. If non-zero, this overrides the indent of '(' and '=' continuation indents.
# For FreeBSD, this is set to 4.
indent_continue                          = 0        # number

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs                         = 1        # number

# Comments that are not a brace level are indented with tabs on a tabstop.
# Requires indent_with_tabs=2. If false, will use spaces.
indent_cmt_with_tabs                     = false    # false/true

# Whether to indent strings broken by '\' so that they line up
indent_align_string                      = false    # false/true

# The number of spaces to indent multi-line XML strings.
# Requires indent_align_string=True
indent_xml_string                        = 0        # number

# Spaces to indent '{' from level
indent_brace                             = 0        # number

# Whether braces are indented to the body level
indent_braces                            = false    # false/true

# Disabled indenting function braces if indent_braces is true
indent_braces_no_func                    = false    # false/true

# Disabled indenting class braces if indent_braces is true
indent_braces_no_class                   = false    # false/true

# Disabled indenting struct braces if indent_braces is true
indent_braces_no_struct                  = false    # false/true

# Indent based on the size of the brace parent, i.e. 'if' => 3 spaces, 'for' => 4 spaces, etc.
indent_brace_parent                      = false    # false/true

# Whether the 'namespace' body is indented
indent_namespace                         = false    # false/true

# The number of spaces to indent a namespace block
indent_namespace_level                   = 0        # number

# If the body of the namespace is longer than this number, it won't be indented.
# Requires indent_namespace=true. Default=0 (no limit)
indent_namespace_limit                   = 0        # number

# Whether the 'extern "C"' body is indented
indent_extern                            = false    # false/true

# Whether the 'class' body is indented
indent_class                             = false    # false/true

# Whether to indent the stuff after a leading class colon
indent_class_colon                       = false    # false/true

# Additional indenting for constructor initializer list
indent_ctor_init                         = 0        # number

# False=treat 'else\nif' as 'else if' for indenting purposes
# True=indent the 'if' one level
indent_else_if                           = false    # false/true

# Amount to indent variable declarations after a open brace. neg=relative, pos=absolute
indent_var_def_blk                       = 0        # number

# Indent continued variable declarations instead of aligning.
indent_var_def_cont                      = false    # false/true

# True:  indent continued function call parameters one indent level
# False: align parameters under the open paren
indent_func_call_param                   = false    # false/true

# Same as indent_func_call_param, but for function defs
indent_func_def_param                    = false    # false/true

# Same as indent_func_call_param, but for function protos
indent_func_proto_param                  = false    # false/true

# Same as indent_func_call_param, but for class declarations
indent_func_class_param                  = false    # false/true

# Same as indent_func_call_param, but for class variable constructors
indent_func_ctor_var_param               = false    # false/true

# Same as indent_func_call_param, but for templates
indent_template_param                    = false    # false/true

# Double the indent for indent_func_xxx_param options
indent_func_param_double                 = false    # false/true

# Indentation column for standalone 'const' function decl/proto qualifier
indent_func_const                        = 0        # number

# Indentation column for standalone 'throw' function decl/proto qualifier
indent_func_throw                        = 0        # number

# The number of spaces to indent a continued '->' or '.'
# Usually set to 0, 1, or indent_columns.
indent_member                            = 0        # number

# Spaces to indent single line ('//') comments on lines before code
indent_sing_line_comments                = 0        # number

# If set, will indent trailing single line ('//') comments relative
# to the code instead of trying to keep the same absolute column
indent_relative_single_line_comments     = false    # false/true

# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
indent_switch_case                       = 0        # number

# Spaces to shift the 'case' line, without affecting any other lines
# Usually 0.
indent_case_shift                        = 0        # number

# Spaces to indent '{' from 'case'.
# By default, the brace will appear under the 'c' in case.
# Usually set to 0 or indent_columns.
indent_case_brace                        = 0        # number

# Whether to indent comments found in first column
indent_col1_comment                      = false    # false/true

# How to indent goto labels
#  >0 : absolute column where 1 is the leftmost column
#  <=0 : subtract from brace indent
indent_label                             = 1        # number

# Same as indent_label, but for access specifiers that are followed by a colon
indent_access_spec                       = 1        # number

# Indent the code after an access specifier by one level.
# If set, this option forces 'indent_access_spec=0'
indent_access_spec_body                  = false    # false/true

# If an open paren is followed by a newline, indent the next line so that it lines up after the open paren (not recommended)
indent_paren_nl                          = false    # false/true

# Controls the indent of a close paren after a newline.
# 0: Indent to body level
# 1: Align under the open paren
# 2: Indent to the brace level
indent_paren_close                       = 0        # number

# Controls the indent of a comma when inside a paren.If TRUE, aligns under the open paren
indent_comma_paren                       = false    # false/true

# Controls the indent of a BOOL operator when inside a paren.If TRUE, aligns under the open paren
indent_bool_paren                        = false    # false/true

# If 'indent_bool_paren' is true, controls the indent of the first expression. If TRUE, aligns the first expression to the following ones
indent_first_bool_expr                   = false    # false/true

# If an open square is followed by a newline, indent the next line so that it lines up after the open square (not recommended)
indent_square_nl                         = false    # false/true

# Don't change the relative indent of ESQL/C 'EXEC SQL' bodies
indent_preserve_sql                      = false    # false/true

# Align continued statements at the '='. Default=True
# If FALSE or the '=' is followed by a newline, the next line is indent one tab.
indent_align_assign                      = true     # false/true

#
# Spacing options
#

# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
sp_arith                                 = remove   # remove/remove/remove/force

# Add or remove space around assignment operator '=', '+=', etc
sp_assign                                = remove   # remove/remove/remove/force

# Add or remove space around assignment operator '=' in a prototype
sp_assign_default                        = remove   # remove/remove/remove/force

# Add or remove space before assignment operator '=', '+=', etc. Overrides sp_assign.
sp_before_assign                         = remove   # remove/remove/remove/force

# Add or remove space after assignment operator '=', '+=', etc. Overrides sp_assign.
sp_after_assign                          = remove   # remove/remove/remove/force

# Add or remove space around assignment '=' in enum
sp_enum_assign                           = remove   # remove/remove/remove/force

# Add or remove space before assignment '=' in enum. Overrides sp_enum_assign.
sp_enum_before_assign                    = remove   # remove/remove/remove/force

# Add or remove space after assignment '=' in enum. Overrides sp_enum_assign.
sp_enum_after_assign                     = remove   # remove/remove/remove/force

# Add or remove space around preprocessor '##' concatenation operator. Default=Add
sp_pp_concat                             = remove      # remove/remove/remove/force

# Add or remove space after preprocessor '#' stringify operator. Also affects the '#@' charizing operator. Default=Add
sp_pp_stringify                          = remove      # remove/remove/remove/force

# Add or remove space around boolean operators '&&' and '||'
sp_bool                                  = remove   # remove/remove/remove/force

# Add or remove space around compare operator '<', '>', '==', etc
sp_compare                               = remove   # remove/remove/remove/force

# Add or remove space inside '(' and ')'
sp_inside_paren                          = remove   # remove/remove/remove/force

# Add or remove space between nested parens
sp_paren_paren                           = remove   # remove/remove/remove/force

# Whether to balance spaces inside nested parens
sp_balance_nested_parens                 = false    # false/true

# Add or remove space between ')' and '{'
sp_paren_brace                           = remove   # remove/remove/remove/force

# Add or remove space before pointer star '*'
sp_before_ptr_star                       = remove   # remove/remove/remove/force

# Add or remove space before pointer star '*' that isn't followed by a variable name
# If set to 'remove', sp_before_ptr_star is used instead.
sp_before_unnamed_ptr_star               = remove   # remove/remove/remove/force

# Add or remove space between pointer stars '*'
sp_between_ptr_star                      = remove   # remove/remove/remove/force

# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star                        = remove   # remove/remove/remove/force

# Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_after_ptr_star_func                   = remove   # remove/remove/remove/force

# Add or remove space before a pointer star '*', if followed by a func proto/def.
sp_before_ptr_star_func                  = remove   # remove/remove/remove/force

# Add or remove space before a reference sign '&'
sp_before_byref                          = remove   # remove/remove/remove/force

# Add or remove space before a reference sign '&' that isn't followed by a variable name
# If set to 'remove', sp_before_byref is used instead.
sp_before_unnamed_byref                  = remove   # remove/remove/remove/force

# Add or remove space after reference sign '&', if followed by a word.
sp_after_byref                           = remove   # remove/remove/remove/force

# Add or remove space after a reference sign '&', if followed by a func proto/def.
sp_after_byref_func                      = remove   # remove/remove/remove/force

# Add or remove space before a reference sign '&', if followed by a func proto/def.
sp_before_byref_func                     = remove   # remove/remove/remove/force

# Add or remove space between type and word. Default=Force
sp_after_type                            = force    # remove/remove/remove/force

# Add or remove space in 'template <' vs 'template<'.
# If set to remove, sp_before_angle is used.
sp_template_angle                        = remove   # remove/remove/remove/force

# Add or remove space before '<>'
sp_before_angle                          = remove   # remove/remove/remove/force

# Add or remove space inside '<' and '>'
sp_inside_angle                          = remove   # remove/remove/remove/force

# Add or remove space after '<>'
sp_after_angle                           = remove   # remove/remove/remove/force

# Add or remove space between '<>' and '(' as found in 'new List<byte>();'
sp_angle_paren                           = remove   # remove/remove/remove/force

# Add or remove space between '<>' and a word as in 'List<byte> m;'
sp_angle_word                            = remove   # remove/remove/remove/force

# Add or remove space between '>' and '>' in '>>' (template stuff C++/C# only). Default=Add
sp_angle_shift                           = remove      # remove/remove/remove/force

# Add or remove space before '(' of 'if', 'for', 'switch', and 'while'
sp_before_sparen                         = remove   # remove/remove/remove/force

# Add or remove space inside if-condition '(' and ')'
sp_inside_sparen                         = remove   # remove/remove/remove/force

# Add or remove space before if-condition ')'. Overrides sp_inside_sparen.
sp_inside_sparen_close                   = remove   # remove/remove/remove/force

# Add or remove space after ')' of 'if', 'for', 'switch', and 'while'
sp_after_sparen                          = remove   # remove/remove/remove/force

# Add or remove space between ')' and '{' of 'if', 'for', 'switch', and 'while'
sp_sparen_brace                          = remove   # remove/remove/remove/force

# Add or remove space between 'invariant' and '(' in the D language.
sp_invariant_paren                       = remove   # remove/remove/remove/force

# Add or remove space after the ')' in 'invariant (C) c' in the D language.
sp_after_invariant_paren                 = remove   # remove/remove/remove/force

# Add or remove space before empty statement ';' on 'if', 'for' and 'while'
sp_special_semi                          = remove   # remove/remove/remove/force

# Add or remove space before ';'. Default=Remove
sp_before_semi                           = remove   # remove/remove/remove/force

# Add or remove space before ';' in non-empty 'for' statements
sp_before_semi_for                       = remove   # remove/remove/remove/force

# Add or remove space before a semicolon of an empty part of a for statement.
sp_before_semi_for_empty                 = remove   # remove/remove/remove/force

# Add or remove space after ';', except when followed by a comment. Default=Add
sp_after_semi                            = remove      # remove/remove/remove/force

# Add or remove space after ';' in non-empty 'for' statements. Default=Force
sp_after_semi_for                        = force    # remove/remove/remove/force

# Add or remove space after the final semicolon of an empty part of a for statement: for ( ; ; <here> ).
sp_after_semi_for_empty                  = remove   # remove/remove/remove/force

# Add or remove space before '[' (except '[]')
sp_before_square                         = remove   # remove/remove/remove/force

# Add or remove space before '[]'
sp_before_squares                        = remove   # remove/remove/remove/force

# Add or remove space inside a non-empty '[' and ']'
sp_inside_square                         = remove   # remove/remove/remove/force

# Add or remove space after ','
sp_after_comma                           = remove   # remove/remove/remove/force

# Add or remove space before ','
sp_before_comma                          = remove   # remove/remove/remove/force

# Add or remove space between an open paren and comma: '(,' vs '( ,'
sp_paren_comma                           = force    # remove/remove/remove/force

# Add or remove space before the variadic '...' when preceded by a non-punctuator
sp_before_ellipsis                       = remove   # remove/remove/remove/force

# Add or remove space after class ':'
sp_after_class_colon                     = remove   # remove/remove/remove/force

# Add or remove space before class ':'
sp_before_class_colon                    = remove   # remove/remove/remove/force

# Add or remove space before case ':'. Default=Remove
sp_before_case_colon                     = remove   # remove/remove/remove/force

# Add or remove space between 'operator' and operator sign
sp_after_operator                        = remove   # remove/remove/remove/force

# Add or remove space between the operator symbol and the open paren, as in 'operator ++('
sp_after_operator_sym                    = remove   # remove/remove/remove/force

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'
sp_after_cast                            = remove   # remove/remove/remove/force

# Add or remove spaces inside cast parens
sp_inside_paren_cast                     = remove   # remove/remove/remove/force

# Add or remove space between the type and open paren in a C++ cast, i.e. 'int(exp)' vs 'int (exp)'
sp_cpp_cast_paren                        = remove   # remove/remove/remove/force

# Add or remove space between 'sizeof' and '('
sp_sizeof_paren                          = remove   # remove/remove/remove/force

# Add or remove space after the tag keyword (Pawn)
sp_after_tag                             = remove   # remove/remove/remove/force

# Add or remove space inside enum '{' and '}'
sp_inside_braces_enum                    = remove   # remove/remove/remove/force

# Add or remove space inside struct/union '{' and '}'
sp_inside_braces_struct                  = remove   # remove/remove/remove/force

# Add or remove space inside '{' and '}'
sp_inside_braces                         = remove   # remove/remove/remove/force

# Add or remove space inside '{}'
sp_inside_braces_empty                   = remove   # remove/remove/remove/force

# Add or remove space between return type and function name
# A minimum of 1 is forced except for pointer return types.
sp_type_func                             = remove   # remove/remove/remove/force

# Add or remove space between function name and '(' on function declaration
sp_func_proto_paren                      = remove   # remove/remove/remove/force

# Add or remove space between function name and '(' on function definition
sp_func_def_paren                        = remove   # remove/remove/remove/force

# Add or remove space inside empty function '()'
sp_inside_fparens                        = remove   # remove/remove/remove/force

# Add or remove space inside function '(' and ')'
sp_inside_fparen                         = remove   # remove/remove/remove/force

# Add or remove space between ']' and '(' when part of a function call.
sp_square_fparen                         = remove   # remove/remove/remove/force

# Add or remove space between ')' and '{' of function
sp_fparen_brace                          = remove   # remove/remove/remove/force

# Add or remove space between function name and '(' on function calls
sp_func_call_paren                       = remove   # remove/remove/remove/force

# Add or remove space between function name and '()' on function calls without parameters.
# If set to 'remove' (the default), sp_func_call_paren is used.
sp_func_call_paren_empty                 = remove   # remove/remove/remove/force

# Add or remove space between the user function name and '(' on function calls
# You need to set a keyword to be a user function, like this: 'set func_call_user _' in the config file.
sp_func_call_user_paren                  = remove   # remove/remove/remove/force

# Add or remove space between a constructor/destructor and the open paren
sp_func_class_paren                      = remove   # remove/remove/remove/force

# Add or remove space between 'return' and '('
sp_return_paren                          = remove   # remove/remove/remove/force

# Add or remove space between '__attribute__' and '('
sp_attribute_paren                       = remove   # remove/remove/remove/force

# Add or remove space between 'defined' and '(' in '#if defined (FOO)'
sp_defined_paren                         = remove   # remove/remove/remove/force

# Add or remove space between 'throw' and '(' in 'throw (something)'
sp_throw_paren                           = remove   # remove/remove/remove/force

# Add or remove space between 'catch' and '(' in 'catch (something) { }'
# If set to remove, sp_before_sparen is used.
sp_catch_paren                           = remove   # remove/remove/remove/force

# Add or remove space between 'version' and '(' in 'version (something) { }' (D language)
# If set to remove, sp_before_sparen is used.
sp_version_paren                         = remove   # remove/remove/remove/force

# Add or remove space between 'scope' and '(' in 'scope (something) { }' (D language)
# If set to remove, sp_before_sparen is used.
sp_scope_paren                           = remove   # remove/remove/remove/force

# Add or remove space between macro and value
sp_macro                                 = remove   # remove/remove/remove/force

# Add or remove space between macro function ')' and value
sp_macro_func                            = remove   # remove/remove/remove/force

# Add or remove space between 'else' and '{' if on the same line
sp_else_brace                            = remove   # remove/remove/remove/force

# Add or remove space between '}' and 'else' if on the same line
sp_brace_else                            = remove   # remove/remove/remove/force

# Add or remove space between '}' and the name of a typedef on the same line
sp_brace_typedef                         = remove   # remove/remove/remove/force

# Add or remove space between 'catch' and '{' if on the same line
sp_catch_brace                           = remove   # remove/remove/remove/force

# Add or remove space between '}' and 'catch' if on the same line
sp_brace_catch                           = remove   # remove/remove/remove/force

# Add or remove space between 'finally' and '{' if on the same line
sp_finally_brace                         = remove   # remove/remove/remove/force

# Add or remove space between '}' and 'finally' if on the same line
sp_brace_finally                         = remove   # remove/remove/remove/force

# Add or remove space between 'try' and '{' if on the same line
sp_try_brace                             = remove   # remove/remove/remove/force

# Add or remove space between get/set and '{' if on the same line
sp_getset_brace                          = remove   # remove/remove/remove/force

# Add or remove space before the '::' operator
sp_before_dc                             = remove   # remove/remove/remove/force

# Add or remove space after the '::' operator
sp_after_dc                              = remove   # remove/remove/remove/force

# Add or remove around the D named array initializer ':' operator
sp_d_array_colon                         = remove   # remove/remove/remove/force

# Add or remove space after the '!' (not) operator. Default=Remove
sp_not                                   = remove   # remove/remove/remove/force

# Add or remove space after the '~' (invert) operator. Default=Remove
sp_inv                                   = remove   # remove/remove/remove/force

# Add or remove space after the '&' (removeress-of) operator. Default=Remove
# This does not affect the spacing after a '&' that is part of a type.
sp_remover                                  = remove   # remove/remove/remove/force

# Add or remove space around the '.' or '->' operators. Default=Remove
sp_member                                = remove   # remove/remove/remove/force

# Add or remove space after the '*' (dereference) operator. Default=Remove
# This does not affect the spacing after a '*' that is part of a type.
sp_deref                                 = remove   # remove/remove/remove/force

# Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'. Default=Remove
sp_sign                                  = remove   # remove/remove/remove/force

# Add or remove space before or after '++' and '--', as in '(--x)' or 'y++;'. Default=Remove
sp_incdec                                = remove   # remove/remove/remove/force

# Add or remove space before a backslash-newline at the end of a line. Default=Add
sp_before_nl_cont                        = remove      # remove/remove/remove/force

# Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'
sp_after_oc_scope                        = remove   # remove/remove/remove/force

# Add or remove space after the colon in message specs
# '-(int) f:(int) x;' vs '-(int) f: (int) x;'
sp_after_oc_colon                        = remove   # remove/remove/remove/force

# Add or remove space before the colon in message specs
# '-(int) f: (int) x;' vs '-(int) f : (int) x;'
sp_before_oc_colon                       = remove   # remove/remove/remove/force

# Add or remove space after the colon in message specs
# '[object setValue:1];' vs '[object setValue: 1];'
sp_after_send_oc_colon                   = remove   # remove/remove/remove/force

# Add or remove space before the colon in message specs
# '[object setValue:1];' vs '[object setValue :1];'
sp_before_send_oc_colon                  = remove   # remove/remove/remove/force

# Add or remove space after the (type) in message specs
# '-(int)f: (int) x;' vs '-(int)f: (int)x;'
sp_after_oc_type                         = remove   # remove/remove/remove/force

# Add or remove space after the first (type) in message specs
# '-(int) f:(int)x;' vs '-(int)f:(int)x;'
sp_after_oc_return_type                  = remove   # remove/remove/remove/force

# Add or remove space between '@selector' and '('
# '@selector(msgName)' vs '@selector (msgName)'
# Also applies to @protocol() constructs
sp_after_oc_at_sel                       = remove   # remove/remove/remove/force

# Add or remove space between '@selector(x)' and the following word
# '@selector(foo) a:' vs '@selector(foo)a:'
sp_after_oc_at_sel_parens                = remove   # remove/remove/remove/force

# Add or remove space inside '@selector' parens
# '@selector(foo)' vs '@selector( foo )'
# Also applies to @protocol() constructs
sp_inside_oc_at_sel_parens               = remove   # remove/remove/remove/force

# Add or remove space before a block pointer caret
# '^int (int arg){...}' vs. ' ^int (int arg){...}'
sp_before_oc_block_caret                 = remove   # remove/remove/remove/force

# Add or remove space after a block pointer caret
# '^int (int arg){...}' vs. '^ int (int arg){...}'
sp_after_oc_block_caret                  = remove   # remove/remove/remove/force

# Add or remove space around the ':' in 'b ? t : f'
sp_cond_colon                            = remove   # remove/remove/remove/force

# Add or remove space around the '?' in 'b ? t : f'
sp_cond_question                         = remove   # remove/remove/remove/force

# Fix the spacing between 'case' and the label. Only 'remove' and 'force' make sense here.
sp_case_label                            = remove   # remove/remove/remove/force

# Control the space around the D '..' operator.
sp_range                                 = remove   # remove/remove/remove/force

# Control the space after the opening of a C++ comment '// A' vs '//A'
sp_cmt_cpp_start                         = remove   # remove/remove/remove/force

# Controls the spaces between #else or #endif and a trailing comment
sp_endif_cmt                             = remove   # remove/remove/remove/force

# Controls the spaces after 'new', 'delete', and 'delete[]'
sp_after_new                             = remove   # remove/remove/remove/force

# Controls the spaces before a trailing or embedded comment
sp_before_tr_emb_cmt                     = remove   # remove/remove/remove/force

# Number of spaces before a trailing or embedded comment
sp_num_before_tr_emb_cmt                 = 0        # number

